"""
# enum EventName

The squid tracks these on-chain events:
  * Posts.PostCreated
  * Posts.PostUpdated
  * Posts.PostMoved
  * Reactions.PostReactionCreated
  * Reactions.PostReactionUpdated
  * Reactions.PostReactionDeleted
  * Spaces.SpaceCreated
  * Spaces.SpaceUpdated
  * Profiles.ProfileUpdated
  * SpaceFollows.SpaceFollowed
  * SpaceFollows.SpaceUnfollowed
  * SpaceOwnership.SpaceOwnershipTransferAccepted
  * AccountFollows.AccountFollowed
  * AccountFollows.AccountUnfollowed

***

However, some of the on-chain events have multiple logical meanings.
As a result, the squid uses synthetic events in addition to native on-chain events.

> **"Synthetic event"** - logical event which does not exist in blockchain and can be
> generated by blockchain event with specific data conditions.

### The on-squid events are:
* PostCreated
* PostDeleted - *synthetic*
* PostUpdated
* PostShared -  *synthetic*
* PostMoved
* PostFollowed - *synthetic*
* PostUnfollowed - *synthetic*
* PostReactionCreated
* PostReactionUpdated
* PostReactionDeleted
* SpaceCreated
* SpaceUpdated
* SpaceFollowed
* SpaceUnfollowed
* SpaceOwnershipTransferAccepted
* AccountFollowed
* AccountUnfollowed
* ProfileUpdated
* CommentCreated - *synthetic*
* CommentDeleted - *synthetic*
* CommentUpdated - *synthetic*
* CommentShared - *synthetic*
* CommentReactionCreated - *synthetic*
* CommentReactionUpdated - *synthetic*
* CommentReactionDeleted - *synthetic*
* CommentReplyCreated - *synthetic*
* CommentReplyDeleted - *synthetic*
* CommentReplyUpdated - *synthetic*
* CommentReplyShared - *synthetic*
* CommentReplyReactionCreated - *synthetic*
* CommentReplyReactionUpdated - *synthetic*
* CommentReplyReactionDeleted - *synthetic*
"""
enum EventName {
  PostCreated
  PostDeleted # synthetic
  PostUpdated
  PostShared # synthetic
  PostMoved
  PostFollowed # synthetic
  PostUnfollowed # synthetic
  PostReactionCreated
  PostReactionUpdated
  PostReactionDeleted

  SpaceCreated
  SpaceUpdated
  SpaceFollowed
  SpaceUnfollowed
  SpaceOwnershipTransferAccepted

  AccountFollowed
  AccountUnfollowed
  ProfileUpdated

  CommentCreated # synthetic
  CommentDeleted # synthetic
  CommentUpdated # synthetic
  CommentShared # synthetic
  CommentReactionCreated # synthetic
  CommentReactionUpdated # synthetic
  CommentReactionDeleted # synthetic
  CommentReplyCreated # synthetic
  CommentReplyDeleted # synthetic
  CommentReplyUpdated # synthetic
  CommentReplyShared # synthetic
  CommentReplyReactionCreated # synthetic
  CommentReplyReactionUpdated # synthetic
  CommentReplyReactionDeleted # synthetic
  UserNameRegistered # synthetic
  UserNameUpdated # synthetic
}

"""
Post types.
  - Comment - This post is a Comment or Comment Reply
  - SharedPost - This post has been created as a result of another post being shared
  - RegularPost - Regular top level post
"""
enum PostKind {
  Comment
  SharedPost
  RegularPost
}
enum ReactionKind {
  Upvote
  Downvote
}

enum Status {
  Active
  Deleted
}

"""
The Account entity
"""
type Account @entity {
  """
  The account's public key converted to ss58 format for the Subsocial chain (prefix "28")
  """
  id: ID!

  """
  A One-To-One relationship with the particular Space entity which is defined as the Account Profile
  """
  profileSpace: Space

  """
  Many-To-Many relationship between current Account and follower Account through AccountFollowers (foreign key - "followingAccount")
  """
  followers: [AccountFollowers]! @derivedFrom(field: "followingAccount")

  """
  The total number of followers that an Account has (followers.length)
  """
  followersCount: Int!

  """
  A One-To-Many relationship between the current Account and an Account being followed through AccountFollowers (foreign key - "followerAccount")
  """
  followingAccounts: [AccountFollowers]! @derivedFrom(field: "followerAccount")

  """
  The total number of all accounts being followed by the current Account (followingAccounts.length)
  """
  followingAccountsCount: Int!

  """
  A One-To-Many relationship with the Posts which are created by an Account (foreign key - "createdByAccount")
  """
  posts: [Post] @derivedFrom(field: "createdByAccount")

  """
  A One-To-Many relationship with the Posts which are owned by an Account (foreign key - "ownedByAccount")
  """
  ownedPosts: [Post] @derivedFrom(field: "ownedByAccount")

  """
  The total number of Posts owned by an Account (ownedPosts.length)
  """
  ownedPostsCount: Int!

  """
  The total number of Posts that an Account is following (currently, a post is only followed by its creator)
  """
  followingPostsCount: Int!

  """
  A One-To-Many relationship with the Spaces that have been created by an Account (foreign key - "createdByAccount")
  """
  spacesCreated: [Space!] @derivedFrom(field: "createdByAccount")

  """
  A One-To-Many relationship with the Spaces that are currently owned by an Account  (foreign key - "ownedByAccount")
  """
  spacesOwned: [Space!] @derivedFrom(field: "ownedByAccount")

  """
  A Many-To-Many relationship between an Account and the Spaces that it follows through SpaceFollowers (foreign key - "followerAccount")
  """
  spacesFollowed: [SpaceFollowers!] @derivedFrom(field: "followerAccount")

  """
  The total number of Spaces that an Account is following
  """
  followingSpacesCount: Int!

  """
  A Many-To-Many relationship between Account and done Activity in network through NewsFeed (foreign key - "account").
  Each Activity has the "event<EventName>" and "post" fields, which can be used for adding created Posts to a user's Feed.
  """
  feeds: [NewsFeed]! @derivedFrom(field: "account")

  """
  Many-To-Many relationship between Account and done Activity in network through Notification (foreign key - "account").
  """
  notifications: [Notification]! @derivedFrom(field: "account")

  """
  A One-To-Many relationship with Activity which are done by Account (foreign key - "account")
  """
  activities: [Activity]! @derivedFrom(field: "account")

  """
  A One-To-Many relationship with the Reactions that are made by an Account (foreign key - "account")
  """
  reactions: [Reaction]! @derivedFrom(field: "account")

  """
  The DateTime when an Account was updated by the Profiles.ProfileUpdated event
  """
  updatedAtTime: DateTime

  """
  The block height when an Account was updated by the Profiles.ProfileUpdated event
  """
  updatedAtBlock: BigInt

  """
  List of usernames that owns an Account.
  """
  usernames: [String]
}

"""
The Post entity
"""
type Post @entity {
  """
  The Post ID, the same as it is on the blockchain.
  """
  id: ID!

  """
  A One-to-One relationship with a Post. This field only has a value if the current Post is a Comment or a Reply to a Comment, and contains a relationship with a top level Regular Post.
  """
  rootPost: Post

  """
  A One-to-One relationship with a Post. This field only has a value if the current Post is a Reply to a Comment and contains a relationship with a Comment Post or another Reply (in case there is discussion within context of some Comment).
  """
  parentPost: Post

  """
  A One-to-One relationship with a Post which has been shared. The Current Post is a new Post which has been created as a result of the sharing action, and can contain an additional body as a comment on the shared Post. "sharedPost" is relationhip with the Post that was shared.
  """
  sharedPost: Post

  """
  Is the current Post a Comment to a Regular Post or a Comment Post?
  """
  isComment: Boolean! @index

  """
  Is the current post hidden?
  """
  hidden: Boolean! @index

  """
  A One-To-One relationship with the Account entity of a Post's owner. Currently we do not have Post transfer functionality.
  """
  ownedByAccount: Account!

  """
  A One-To-One relationship with the Account entity of a Post's creator.
  """
  createdByAccount: Account!

  """
  The block height when a Post was created.
  """
  createdAtBlock: BigInt

  """
  The DateTime when a Post was created.
  """
  createdAtTime: DateTime @index

  """
  The day when a Post was created.
  """
  createdOnDay: DateTime

  """
  The time when a Post was created.
  """
  updatedAtTime: DateTime

  """
  A One-To-One relationship with a Space that the current Post has been created in. It can be null if the Post is deleted (moved to Space with ID === null)
  """
  space: Space

  """
  The type of Post (Comment, SharedPost, or RegularPost)
  """
  kind: PostKind @index

  """
  A One-To-Many relationship between a Regular Post and the Accounts that follow the post through PostFollowers (foreign key - "followingPost")
  (currently, a post is only followed by its creator)
  """
  postFollowers: [PostFollowers] @derivedFrom(field: "followingPost")

  """
  A One-To-Many relationship between a Comment Post or Comment Reply and the Accounts that follow the Comment through CommentFollowers (foreign key - "followingComment")
  (currently, a post is only followed by its creator)
  """
  commentFollowers: [CommentFollowers] @derivedFrom(field: "followingComment")

  """
  The total number of followers that a Post has.
  """
  followersCount: Int! @index

  """
  The total number of replies to the current Post.
  """
  repliesCount: Int!

  """
  The total number of public (non-hidden) replies to the current Post.
  """
  publicRepliesCount: Int! @index

  """
  The total number of hidden replies to the current Post.
  """
  hiddenRepliesCount: Int!

  """
  How many times the current Post has been shared.
  """
  sharesCount: Int! @index

  """
  The total number of UpVote reactions to the current Post.
  """
  upvotesCount: Int! @index

  """
  The total number of DownVote reactions to the current Post.
  """
  downvotesCount: Int! @index

  """
  The total number of all reactions to the current Post.
  """
  reactionsCount: Int! @index

  """
  A One-To-Many relationship with Reactions for the current Post (foreign key - "post")
  """
  reactions: [Reaction] @derivedFrom(field: "post")

  """
  The title of the Post (IPFS content)
  """
  title: String
  """
  The URL for the Post's image (IPFS content)
  """
  image: String
  """
  The link of the Post (IPFS content)
  """
  link: String
  """
  Post canonical URL (IPFS content)
  """
  canonical: String
  """
  The CID of the content on IPFS.
  """
  content: String
  """
  Post slug URL (IPFS content)
  """
  slug: String
  """
  The body test of the Post (IPFS content)
  """
  body: String
  """
  The summary of the Post body
  """
  summary: String
  """
  Is the Post body longer than the summary?
  """
  isShowMore: Boolean
  """
  ! Deprecated field and will be removed !
  """
  meta: String
  """
  A list of a Post's tags, converted to a string with "comma" as a separator (IPFS content)
  """
  tagsOriginal: String
  """
  The Post format (IPFS content)
  """
  format: String
  """
  The ID of the tweet attached to the current Post (IPFS content)
  """
  tweetId: String
  """
  The details of the tweet (IPFS content)
  """
  tweetDetails: TweetDetails
  """
  ! Deprecated field and will be removed !
  """
  proposalIndex: Int # postContent.meta[0]
  """
  Scope of Post's properties from IPFS content which are not supported by current squid's DB schema.
  """
  experimental: JSON

  """
  The ID of application current Space has been created through.
  """
  appId: String
}

"""
The Post Reaction entity
"""
type Reaction @entity {
  """
  The ID of a Reaction, which will have the same value and reaction ID on the blockchain.
  """
  id: ID!

  """
  A One-to-One relationship with the Post that the current reaction has been made for.
  """
  post: Post!

  """
  A One-to-One relationship with the Account that created the Reaction.
  """
  account: Account!

  """
  The type of Reaction (Upvote, Downvote).
  """
  kind: ReactionKind! @index

  """
  The status of a Reaction (Active, Deleted). This is a synthetic value.
  It does not exist on the blockchain and is only used in the squid.
  """
  status: Status! @index

  """
  The block height when a Reaction was created.
  """
  createdAtBlock: BigInt!

  """
  The DateTime when a Reaction was created.
  """
  createdAtTime: DateTime!

  """
  The Block height when a Reaction was updated.
  """
  updatedAtBlock: BigInt

  """
  The DateTime when a Reaction was updated.
  """
  updatedAtTime: DateTime
}

"""
The Space entity
"""
type Space @entity {
  """
  The ID of a Space, which will have the same value and Space ID on the blockchain.
  """
  id: ID!

  """
  A One-To-One relationship with the Account entity that created a Space.
  """
  createdByAccount: Account!

  """
  A One-To-One relationship with the Account entity that owns a Space.
  """
  ownedByAccount: Account!

  """
  A One-To-One relationship with the Account which uses the current Space as its profile.
  """
  profileSpace: Account

  """
  The block height when a Space was created.
  """
  createdAtBlock: BigInt

  """
  The DateTime when a Space was created.
  """
  createdAtTime: DateTime @index

  """
  The day when a Space was created.
  """
  createdOnDay: DateTime

  """
  The DateTime when a Space was updated.
  """
  updatedAtTime: DateTime

  """
  The block height when a Space was updated.
  """
  updatedAtBlock: BigInt

  """
  A One-To-Many relationship with the Posts created within the current Space (foreign key - "space")
  """
  posts: [Post]! @derivedFrom(field: "space")

  """
  The total number of all Posts (public and hidden) in the current Space (post.length)
  """
  postsCount: Int!

  """
  The total number of public (non-hidden) Posts in the current Space (post.length)
  """
  publicPostsCount: Int! @index

  """
  The total number of hidden Posts in the current Space (post.length)
  """
  hiddenPostsCount: Int!

  """
  Is the Space hidden?
  """
  hidden: Boolean! @index

  """
  The CID of the content on IPFS
  """
  content: String
  """
  The name of a Space (IPFS content)
  """
  name: String
  """
  The URL of the Space's image (IPFS content)
  """
  image: String
  """
  The about text (bio) of a Space (IPFS content)
  """
  about: String
  """
  The summary of the content of a Space (IPFS content)
  """
  summary: String
  """
  Is the Space's "About" section longer than its summary?
  """
  isShowMore: Boolean

  """
  The email address of a Space (IPFS content)
  """
  email: String

  """
  A list of a Space's tags, converted to a string with "comma" as a separator (IPFS content)
  """
  tagsOriginal: String

  """
  A list of the Space's links converted to a string with "comma" as a separator (IPFS content)
  """
  linksOriginal: String

  """
  A list of a Space's interests converted to a string with "comma" as a separator (IPFS content)
  """
  interestsOriginal: String

  """
  Space format (IPFS content)
  """
  format: String

  """
  The username of a Space (will be removed in further versions as deprecated. You should use `username` field instead.) (IPFS content)
  """
  handle: String

  """
  Scope of Space's properties from IPFS content which are not supported by current squid's DB schema.
  """
  experimental: JSON

  """
  Are followers allowed to post in the Space?
  """
  canFollowerCreatePosts: Boolean

  """
  Is this a public space where anyone can post?
  """
  canEveryoneCreatePosts: Boolean

  """
  Space permissions rule
  """
  nonePermissions: SpacePermissions
  """
  Space permissions rule
  """
  everyonePermissions: SpacePermissions
  """
  Space permissions rule
  """
  followerPermissions: SpacePermissions
  """
  Space permissions rule
  """
  spaceOwnerPermissions: SpacePermissions

  """
  A Many-To-Many relationship between a Space and the Accounts that follow it through SpaceFollowers (foreign key - "followingSpace")
  """
  followers: [SpaceFollowers]! @derivedFrom(field: "followingSpace")

  """
  The total number of Accounts following a Space
  """
  followersCount: Int! @index

  """
  The ID of application current Space has been created through.
  """
  appId: String

  """
  The username of a Space (IPFS content)
  """
  username: String
}

"""
The Activity entity, which represents any activity on the blockchain (within the list of tracked events).
"""
type Activity @entity {
  """
  The ID of an Activity. It has the following structure: <blockNumber>-<indexInBlock>-<md5Hash(eventName)>` (e.g. 1093209-1001-1ee8fd8482c322254acff29a8f52f5e1)
  """
  id: ID!

  """
  A One-To-One relationship with the Account that initiated the current activity (it's usually a caller Account)
  """
  account: Account!

  """
  The block height when an activity was done
  """
  blockNumber: BigInt!

  """
  The event's index in the block
  """
  eventIndex: Int!

  """
  The event's name
  """
  event: EventName! @index

  """
  A One-to-One relationship with the following Account if event is `AccountFollowed` or `AccountUnfollowed`.
  """
  followingAccount: Account

  """
  A One-to-One relationship with the Space that is involved in the current Activity
  """
  space: Space
  """
  A One-to-One relationship with the previous Space if the event is `PostMoved` or `DomainMetaUpdated`
  """
  spacePrev: Space

  """
  A One-to-One relationship with the previous owner's Account if the event is "SpaceOwnershipTransferAccepted"
  """
  newOwner: Account

  """
  A One-to-One relationship with the new owner's Account if the event is "SpaceOwnershipTransferAccepted"
  """
  oldOwner: Account

  """
  A One-to-One relationship with the Post that is involved in the current Activity
  """
  post: Post

  """
  A One-to-One relationship with the Reaction that is involved in the current Activity
  """
  reaction: Reaction

  """
  The DateTime when the current activity was done
  """
  date: DateTime!

  """
  Is this particular Activity latest happened in list of Activities with the same event and involved Account.
  """
  aggregated: Boolean @index

  """
  The total number of Activities of the same event type for a specific Account.
  """
  aggCount: BigInt!

  """
  The username of Space or Account which was registered or updated in this particular Activity.
  """
  username: String
}

"""
The junction table for Many-to-Many relationship between follower and following Accounts
"""
type AccountFollowers @entity {
  followerAccount: Account!
  followingAccount: Account!
}

"""
The junction table for Many-to-Many relationship between follower Account and following Space
"""
type SpaceFollowers @entity {
  followerAccount: Account!
  followingSpace: Space!
}

"""
The junction table for Many-to-Many relationship between follower Account and following Post
"""
type PostFollowers @entity {
  followerAccount: Account!
  followingPost: Post!
}

"""
The junction table for Many-to-Many relationship between follower Account and following Comment
"""
type CommentFollowers @entity {
  followerAccount: Account!
  followingComment: Post!
}

"""
The junction table for Many-to-Many relationship between Account and Activity
"""
type NewsFeed @entity {
  account: Account!
  activity: Activity!
}

"""
The junction table for Many-to-Many relationship between Account and Notification
"""
type Notification @entity {
  account: Account!
  activity: Activity!
}

"""
The permission settings of a Space
"""
type SpacePermissions {
  manageRoles: Boolean
  representSpaceInternally: Boolean
  representSpaceExternally: Boolean
  updateSpace: Boolean
  createSubspaces: Boolean
  updateOwnSubspaces: Boolean
  deleteOwnSubspaces: Boolean
  hideOwnSubspaces: Boolean
  updateAnySubspace: Boolean
  deleteAnySubspace: Boolean
  hideAnySubspace: Boolean
  createPosts: Boolean
  updateOwnPosts: Boolean
  deleteOwnPosts: Boolean
  hideOwnPosts: Boolean
  updateAnyPost: Boolean
  deleteAnyPost: Boolean
  hideAnyPost: Boolean
  createComments: Boolean
  updateOwnComments: Boolean
  deleteOwnComments: Boolean
  hideOwnComments: Boolean
  hideAnyComment: Boolean
  upvote: Boolean
  downvote: Boolean
  share: Boolean
  overrideSubspacePermissions: Boolean
  overridePostPermissions: Boolean
  suggestEntityStatus: Boolean
  updateEntityStatus: Boolean
  updateSpaceSettings: Boolean
}

"""
Detailed information about the Tweet attached to a Post
"""
type TweetDetails {
  createdAt: String
  username: String
  authorId: String
  editHistoryTweetIds: [String]
  conversationId: String
  inReplyToUserId: String
  referencedTweets: [ReferencedTweetDetails]
  attachments: TweetAttachmentsDetails
  lang: String
}

type ReferencedTweetDetails {
  id: String
  type: String
}

type TweetAttachmentsDetails {
  mediaKeys: [String]
  pollIds: [String]
}

type IpfsFetchLog @entity {
  id: ID!
  cid: String
  blockHeight: Int!
  errorMsg: String
}
